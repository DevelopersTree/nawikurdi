{"id":"../../node_modules/notyf/notyf.es.js","dependencies":[{"name":"/home/aram/Desktop/nawikurdi/API/package.json","includedInParent":true,"mtime":1590908189847},{"name":"/home/aram/Desktop/nawikurdi/API/node_modules/notyf/package.json","includedInParent":true,"mtime":1590908293856}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NotyfView = exports.NotyfNotification = exports.NotyfEvent = exports.NotyfArrayEvent = exports.NotyfArray = exports.Notyf = exports.DEFAULT_OPTIONS = void 0;\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar NotyfNotification =\n/** @class */\nfunction () {\n  function NotyfNotification(options) {\n    this.options = options;\n  }\n\n  return NotyfNotification;\n}();\n\nexports.NotyfNotification = NotyfNotification;\nvar NotyfArrayEvent;\nexports.NotyfArrayEvent = NotyfArrayEvent;\n\n(function (NotyfArrayEvent) {\n  NotyfArrayEvent[NotyfArrayEvent[\"Add\"] = 0] = \"Add\";\n  NotyfArrayEvent[NotyfArrayEvent[\"Remove\"] = 1] = \"Remove\";\n})(NotyfArrayEvent || (exports.NotyfArrayEvent = NotyfArrayEvent = {}));\n\nvar NotyfArray =\n/** @class */\nfunction () {\n  function NotyfArray() {\n    this.notifications = [];\n  }\n\n  NotyfArray.prototype.push = function (elem) {\n    this.notifications.push(elem);\n    this.updateFn(elem, NotyfArrayEvent.Add, this.notifications);\n  };\n\n  NotyfArray.prototype.splice = function (index, num) {\n    var elem = this.notifications.splice(index, num)[0];\n    this.updateFn(elem, NotyfArrayEvent.Remove, this.notifications);\n    return elem;\n  };\n\n  NotyfArray.prototype.indexOf = function (elem) {\n    return this.notifications.indexOf(elem);\n  };\n\n  NotyfArray.prototype.onUpdate = function (fn) {\n    this.updateFn = fn;\n  };\n\n  return NotyfArray;\n}();\n\nexports.NotyfArray = NotyfArray;\nvar NotyfEvent;\nexports.NotyfEvent = NotyfEvent;\n\n(function (NotyfEvent) {\n  NotyfEvent[NotyfEvent[\"Dismiss\"] = 0] = \"Dismiss\";\n})(NotyfEvent || (exports.NotyfEvent = NotyfEvent = {}));\n\nvar DEFAULT_OPTIONS = {\n  types: [{\n    type: 'success',\n    className: 'notyf__toast--success',\n    backgroundColor: '#3dc763',\n    icon: {\n      className: 'notyf__icon--success',\n      tagName: 'i'\n    }\n  }, {\n    type: 'error',\n    className: 'notyf__toast--error',\n    backgroundColor: '#ed3d3d',\n    icon: {\n      className: 'notyf__icon--error',\n      tagName: 'i'\n    }\n  }],\n  duration: 2000,\n  ripple: true,\n  position: {\n    x: 'right',\n    y: 'bottom'\n  },\n  dismissible: false\n};\nexports.DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n\nvar NotyfView =\n/** @class */\nfunction () {\n  function NotyfView() {\n    this.notifications = [];\n    this.X_POSITION_FLEX_MAP = {\n      left: 'flex-start',\n      center: 'center',\n      right: 'flex-end'\n    };\n    this.Y_POSITION_FLEX_MAP = {\n      top: 'flex-start',\n      center: 'center',\n      bottom: 'flex-end'\n    }; // Creates the main notifications container\n\n    var docFrag = document.createDocumentFragment();\n\n    var notyfContainer = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf'\n    });\n\n    docFrag.appendChild(notyfContainer);\n    document.body.appendChild(docFrag);\n    this.container = notyfContainer; // Identifies the main animation end event\n\n    this.animationEndEventName = this._getAnimationEndEventName();\n\n    this._createA11yContainer();\n  }\n\n  NotyfView.prototype.on = function (event, cb) {\n    var _a;\n\n    this.events = __assign(__assign({}, this.events), (_a = {}, _a[event] = cb, _a));\n  };\n\n  NotyfView.prototype.update = function (notification, type) {\n    if (type === NotyfArrayEvent.Add) {\n      this.addNotification(notification);\n    } else if (type === NotyfArrayEvent.Remove) {\n      this.removeNotification(notification);\n    }\n  };\n\n  NotyfView.prototype.removeNotification = function (notification) {\n    var _this = this;\n\n    var renderedNotification = this._popRenderedNotification(notification);\n\n    var node;\n\n    if (!renderedNotification) {\n      return;\n    }\n\n    node = renderedNotification.node;\n    node.classList.add('notyf__toast--disappear');\n    var handleEvent;\n    node.addEventListener(this.animationEndEventName, handleEvent = function (event) {\n      if (event.target === node) {\n        node.removeEventListener(_this.animationEndEventName, handleEvent);\n\n        _this.container.removeChild(node);\n      }\n    });\n  };\n\n  NotyfView.prototype.addNotification = function (notification) {\n    var node = this._renderNotification(notification);\n\n    this.notifications.push({\n      notification: notification,\n      node: node\n    }); // For a11y purposes, we still want to announce that there's a notification in the screen\n    // even if it comes with no message.\n\n    this._announce(notification.options.message || 'Notification');\n  };\n\n  NotyfView.prototype._renderNotification = function (notification) {\n    var _a;\n\n    var card = this._buildNotificationCard(notification);\n\n    var className = notification.options.className;\n\n    if (className) {\n      (_a = card.classList).add.apply(_a, className.split(' '));\n    }\n\n    this.container.appendChild(card);\n    return card;\n  };\n\n  NotyfView.prototype._popRenderedNotification = function (notification) {\n    var idx = -1;\n\n    for (var i = 0; i < this.notifications.length && idx < 0; i++) {\n      if (this.notifications[i].notification === notification) {\n        idx = i;\n      }\n    }\n\n    if (idx !== -1) {\n      return this.notifications.splice(idx, 1)[0];\n    }\n\n    return;\n  };\n\n  NotyfView.prototype.getXPosition = function (options) {\n    var _a;\n\n    return ((_a = options === null || options === void 0 ? void 0 : options.position) === null || _a === void 0 ? void 0 : _a.x) || 'right';\n  };\n\n  NotyfView.prototype.getYPosition = function (options) {\n    var _a;\n\n    return ((_a = options === null || options === void 0 ? void 0 : options.position) === null || _a === void 0 ? void 0 : _a.y) || 'bottom';\n  };\n\n  NotyfView.prototype.adjustContainerAlignment = function (options) {\n    var align = this.X_POSITION_FLEX_MAP[this.getXPosition(options)];\n    var justify = this.Y_POSITION_FLEX_MAP[this.getYPosition(options)];\n    var style = this.container.style;\n    style.setProperty('justify-content', justify);\n    style.setProperty('align-items', align);\n  };\n\n  NotyfView.prototype._buildNotificationCard = function (notification) {\n    var _this = this;\n\n    var options = notification.options;\n    var iconOpts = options.icon; // Adjust container according to position (e.g. top-left, bottom-center, etc)\n\n    this.adjustContainerAlignment(options); // Create elements\n\n    var notificationElem = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf__toast'\n    });\n\n    var ripple = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf__ripple'\n    });\n\n    var wrapper = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf__wrapper'\n    });\n\n    var message = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf__message'\n    });\n\n    message.innerHTML = options.message || '';\n    var color = options.background || options.backgroundColor; // Build the icon and append it to the card\n\n    if (iconOpts && typeof iconOpts === 'object') {\n      var iconContainer = this._createHTLMElement({\n        tagName: 'div',\n        className: 'notyf__icon'\n      });\n\n      var icon = this._createHTLMElement({\n        tagName: iconOpts.tagName || 'i',\n        className: iconOpts.className,\n        text: iconOpts.text\n      });\n\n      if (color) {\n        icon.style.color = color;\n      }\n\n      iconContainer.appendChild(icon);\n      wrapper.appendChild(iconContainer);\n    }\n\n    wrapper.appendChild(message);\n    notificationElem.appendChild(wrapper); // Add ripple if applicable, else just paint the full toast\n\n    if (color) {\n      if (options.ripple) {\n        ripple.style.background = color;\n        notificationElem.appendChild(ripple);\n      } else {\n        notificationElem.style.background = color;\n      }\n    } // Add dismiss button\n\n\n    if (options.dismissible) {\n      var dismissWrapper = this._createHTLMElement({\n        tagName: 'div',\n        className: 'notyf__dismiss'\n      });\n\n      var dismissButton = this._createHTLMElement({\n        tagName: 'button',\n        className: 'notyf__dismiss-btn'\n      });\n\n      dismissWrapper.appendChild(dismissButton);\n      wrapper.appendChild(dismissWrapper);\n      notificationElem.classList.add(\"notyf__toast--dismissible\");\n      dismissButton.addEventListener('click', function () {\n        var _a;\n\n        return (_a = _this.events) === null || _a === void 0 ? void 0 : _a[NotyfEvent.Dismiss](notification);\n      });\n    } // Adjust margins depending on whether its an upper or lower notification\n\n\n    var className = this.getYPosition(options) === 'top' ? 'upper' : 'lower';\n    notificationElem.classList.add(\"notyf__toast--\" + className);\n    return notificationElem;\n  };\n\n  NotyfView.prototype._createHTLMElement = function (_a) {\n    var tagName = _a.tagName,\n        className = _a.className,\n        text = _a.text;\n    var elem = document.createElement(tagName);\n\n    if (className) {\n      elem.className = className;\n    }\n\n    elem.textContent = text || null;\n    return elem;\n  };\n  /**\r\n   * Creates an invisible container which will announce the notyfs to\r\n   * screen readers\r\n   */\n\n\n  NotyfView.prototype._createA11yContainer = function () {\n    var a11yContainer = this._createHTLMElement({\n      tagName: 'div',\n      className: 'notyf-announcer'\n    });\n\n    a11yContainer.setAttribute('aria-atomic', 'true');\n    a11yContainer.setAttribute('aria-live', 'polite'); // Set the a11y container to be visible hidden. Can't use display: none as\n    // screen readers won't read it.\n\n    a11yContainer.style.border = '0';\n    a11yContainer.style.clip = 'rect(0 0 0 0)';\n    a11yContainer.style.height = '1px';\n    a11yContainer.style.margin = '-1px';\n    a11yContainer.style.overflow = 'hidden';\n    a11yContainer.style.padding = '0';\n    a11yContainer.style.position = 'absolute';\n    a11yContainer.style.width = '1px';\n    a11yContainer.style.outline = '0';\n    document.body.appendChild(a11yContainer);\n    this.a11yContainer = a11yContainer;\n  };\n  /**\r\n   * Announces a message to screenreaders.\r\n   */\n\n\n  NotyfView.prototype._announce = function (message) {\n    var _this = this;\n\n    this.a11yContainer.textContent = ''; // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    // https://github.com/angular/material2/blob/master/src/cdk/a11y/live-announcer/live-announcer.ts\n\n    setTimeout(function () {\n      _this.a11yContainer.textContent = message;\n    }, 100);\n  };\n  /**\r\n   * Determine which animationend event is supported\r\n   */\n\n\n  NotyfView.prototype._getAnimationEndEventName = function () {\n    var el = document.createElement('_fake');\n    var transitions = {\n      MozTransition: 'animationend',\n      OTransition: 'oAnimationEnd',\n      WebkitTransition: 'webkitAnimationEnd',\n      transition: 'animationend'\n    };\n    var t;\n\n    for (t in transitions) {\n      if (el.style[t] !== undefined) {\n        return transitions[t];\n      }\n    } // No supported animation end event. Using \"animationend\" as a fallback\n\n\n    return 'animationend';\n  };\n\n  return NotyfView;\n}();\n/**\r\n * Main controller class. Defines the main Notyf API.\r\n */\n\n\nexports.NotyfView = NotyfView;\n\nvar Notyf =\n/** @class */\nfunction () {\n  function Notyf(opts) {\n    var _this = this;\n\n    this.dismiss = this._removeNotification;\n    this.notifications = new NotyfArray();\n    this.view = new NotyfView();\n    var types = this.registerTypes(opts);\n    this.options = __assign(__assign({}, DEFAULT_OPTIONS), opts);\n    this.options.types = types;\n    this.notifications.onUpdate(function (elem, type) {\n      return _this.view.update(elem, type);\n    });\n    this.view.on(NotyfEvent.Dismiss, function (elem) {\n      return _this._removeNotification(elem);\n    });\n  }\n\n  Notyf.prototype.error = function (payload) {\n    var options = this.normalizeOptions('error', payload);\n    return this.open(options);\n  };\n\n  Notyf.prototype.success = function (payload) {\n    var options = this.normalizeOptions('success', payload);\n    return this.open(options);\n  };\n\n  Notyf.prototype.open = function (options) {\n    var defaultOpts = this.options.types.find(function (_a) {\n      var type = _a.type;\n      return type === options.type;\n    }) || {};\n\n    var config = __assign(__assign({}, defaultOpts), options);\n\n    this.assignProps(['ripple', 'position', 'dismissible'], config);\n    var notification = new NotyfNotification(config);\n\n    this._pushNotification(notification);\n\n    return notification;\n  };\n\n  Notyf.prototype.dismissAll = function () {\n    while (this.notifications.splice(0, 1));\n  };\n  /**\r\n   * Assigns properties to a config object based on two rules:\r\n   * 1. If the config object already sets that prop, leave it as so\r\n   * 2. Otherwise, use the default prop from the global options\r\n   *\r\n   * It's intended to build the final config object to open a notification. e.g. if\r\n   * 'dismissible' is not set, then use the value from the global config.\r\n   *\r\n   * @param props - properties to be assigned to the config object\r\n   * @param config - object whose properties need to be set\r\n   */\n\n\n  Notyf.prototype.assignProps = function (props, config) {\n    var _this = this;\n\n    props.forEach(function (prop) {\n      // intentional double equality to check for both null and undefined\n      config[prop] = config[prop] == null ? _this.options[prop] : config[prop];\n    });\n  };\n\n  Notyf.prototype._pushNotification = function (notification) {\n    var _this = this;\n\n    this.notifications.push(notification);\n    var duration = notification.options.duration !== undefined ? notification.options.duration : this.options.duration;\n\n    if (duration) {\n      setTimeout(function () {\n        return _this._removeNotification(notification);\n      }, duration);\n    }\n  };\n\n  Notyf.prototype._removeNotification = function (notification) {\n    var index = this.notifications.indexOf(notification);\n\n    if (index !== -1) {\n      this.notifications.splice(index, 1);\n    }\n  };\n\n  Notyf.prototype.normalizeOptions = function (type, payload) {\n    var options = {\n      type: type\n    };\n\n    if (typeof payload === 'string') {\n      options.message = payload;\n    } else if (typeof payload === 'object') {\n      options = __assign(__assign({}, options), payload);\n    }\n\n    return options;\n  };\n\n  Notyf.prototype.registerTypes = function (opts) {\n    var incomingTypes = (opts && opts.types || []).slice();\n    var finalDefaultTypes = DEFAULT_OPTIONS.types.map(function (defaultType) {\n      // find if there's a default type within the user input's types, if so, it means the user\n      // wants to change some of the default settings\n      var userTypeIdx = -1;\n      incomingTypes.forEach(function (t, idx) {\n        if (t.type === defaultType.type) userTypeIdx = idx;\n      });\n      var userType = userTypeIdx !== -1 ? incomingTypes.splice(userTypeIdx, 1)[0] : {};\n      return __assign(__assign({}, defaultType), userType);\n    });\n    return finalDefaultTypes.concat(incomingTypes);\n  };\n\n  return Notyf;\n}();\n\nexports.Notyf = Notyf;"},"sourceMaps":null,"error":null,"hash":"61bae7e4ad2cd1d350bf2431d784ce27","cacheData":{"env":{}}}